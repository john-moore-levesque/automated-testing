from os import name, stat, makedirs, environ
from shutil import rmtree
from dotenv import load_dotenv


def load_env():
    '''
    If you have anything you want to load as an environment variable, put it into
    a file in the "features" directory called ".env". You can also override the
    default path by creating an environment variable called "ENVFILE"
    '''
    if environ.get("ENVFILE"):
        try:
            stat(environ.get("ENVFILE"))
            load_dotenv(environ.get("ENVFILE"))
        except OSError:
            load_dotenv(".env")
    else:
        load_dotenv(".env")


def downloads():
    def _createDownloads(downloads):
        rmtree(downloads, ignore_errors=True)
        makedirs(downloads, exist_ok=True)

    if name == "nt":
        downloads = # some windows download path
    else:
        downloads = # some linux download path

    _createDownloads(downloads)
    return downloads


def additionalChromeOptions():
    '''
    additional chrome_options arguments - return a list
    e.g., if you want your ad blocking extension to load, do that here
    '''
    pass


def additionalFirefoxOptions():
    '''
    additional chrome_options arguments - return a list
    e.g., if you want your ad blocking extension to load, do that here
    '''
    pass


def checkChrome():
    '''
    This function should return true if the chromedriver executable exists
    If the function does return true, a Chrome browser can be created
    '''
    if name == "nt":
        chromepath = # some windows path
    else:
        chromepath = # some linux path
    try:
        stat(chromepath)
    except FileNotFoundError:
        return False
    return True


def checkFirefox():
    '''
    This function should return true if the firefox driver exists
    If the function does return true, a Firefox browser can be created
    '''
    if name == "nt":
        firefoxpath = # some windows path
    else:
        firefoxpath = # some linux path
    try:
        stat(firefoxpath)
    except FileNotFoundError:
        return False
    return True


'''
You can have additional functions here - for instance, if you want to test
authentication, you could have a function that returns information about the
authentication methods you want to use.
'''
def authInformation():
    pass
